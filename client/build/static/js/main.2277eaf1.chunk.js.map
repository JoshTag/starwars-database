{"version":3,"sources":["Components/Main/index.js","Styles/Constants/index.js","Components/Characters/index.js","Components/CharacterComments/index.js","Components/Person/index.js","Components/Starships/index.js","Components/Ship/index.js","Components/Vehicles/index.js","Components/Vehicle/index.js","Components/Planets/index.js","Components/Planet/index.js","Components/Error/index.js","router.js","App/App.js","serviceWorker.js","index.js"],"names":["Main","HeroSection","HeroHeader","styled","section","h1","constants","primary","secondary","siteRed","siteGrey","fontMobile","fontTablet","fontDesktop","Characters","useState","people","setPeople","loading","setLoading","useEffect","axios","then","res","data","SectionContainer","SectionHeader","ItemList","map","person","index","ListItem","key","ItemLink","href","id","DetailedItem","name","birth_year","gender","h2","ul","li","a","p","CommentSection","comments","props","onSubmit","e","preventDefault","post","target","value","comment","console","log","catch","err","reset","alert","window","location","reload","required","placeholder","type","timestamp","Person","character","setCharacter","height","mass","hair_color","skin_color","eye_color","Starships","starships","setStarships","ship","Ship","setShip","model","manufacturer","length","max_atmosphering_speed","crew","passenger","cargo_capacity","hyperdrive_rating","starship_class","Vehicles","vehicles","setVehicles","vehicle","setVehicle","vehicle_class","Planets","planets","setPlanet","planet","Planet","rotation_period","orbital_period","diameter","climatet","gravity","terrain","surface_water","population","ErrorPage","routes","Vehicle","Error","App","routeResult","useRoutes","PageContainer","NavContainer","NavLink","div","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2277eaf1.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Main = () => {\n  return (\n    <HeroSection>\n      <HeroHeader>Star Wars Database</HeroHeader>\n    </HeroSection>\n  );\n};\n\nexport default Main;\n\nconst HeroSection = styled.section`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 90vh;\n`\n\nconst HeroHeader = styled.h1`\n  font-size: 2rem;\n  position: relative;\n  top: -5rem;\n`","// // Fonts\n\n// @font-face{\n//   font-family: \"Ubuntu\", sans-serif;\n//   src: url('../../Assets/Fonts/Ubuntu-Regular.ttf') format('ttf');\n// }\n\n// @font-face{\n//   font-family: \"Starjedi\";\n//   src: url('../../Assets/Fonts/Starjedi.ttf') format('truetype');\n// }\n\n\n// // Variables \n\n// $site-font-starwars: \"Starjedi\", sans-serif;\n// $site-font: \"Ubuntu\", sans-serif;\n\n// $colour-black: #000000;\n// $colour-yellow: #FFE81F;\n// $colour-white: #FFFFFF;\n// $colour-grey: #383838;\n// }\n\n// // Mixins\n\n// @mixin tablet {\n//   @media (min-width: 48rem) {\n//       @content;\n//   }\n// }\n\n// @mixin laptop {\n//   @media (min-width: 64rem) {\n//       @content;\n//   }\n// }\n\n// @mixin desktop {\n//   @media (min-width: 90rem) {\n//       @content;\n//   }\n// }\n\n// @mixin site-font {\n//   font-family: $site-font-starwars;\n//   color: $colour-yellow;\n//   font-weight: 400;\n//   letter-spacing: .1rem;\n// }\n\n\n// *{\n//   margin: 0;\n// }\n\n// body {\n//   @include site-font;\n// }\n\nconst constants = {\n  primary: \"#000F08\",\n  secondary: \"#FFE81F\",\n  siteRed: \"#F31E38\",\n  siteGrey: \"#404040\",\n  fontMobile: \"1rem\",\n  fontTablet: \"1.2rem\",\n  fontDesktop: \"1.5rem\"\n}\n\nexport default constants\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\nimport constants from \"../../Styles/Constants\";\n\nconst Characters = () => {\n  const [people, setPeople] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    axios(\"http://localhost:8080/people\").then(res => {\n      setPeople(res.data);\n    });\n  }, []);\n\n  return (\n    <SectionContainer>\n      <SectionHeader>Characters</SectionHeader>\n      {loading === true ? (\n        <ItemList>\n          {people.map((person, index) => {\n            return (\n              <ListItem key={index}>\n                <ItemLink href={`/characters/${person.id}`}>\n                  <DetailedItem>Name: {person.name}</DetailedItem>\n                  <DetailedItem>Birth Year: {person.birth_year}</DetailedItem>\n                  <DetailedItem>Gender: {person.gender}</DetailedItem>\n                </ItemLink>\n              </ListItem>\n            );\n          })}\n        </ItemList>\n      ) : (\n        <h4>LOADING...</h4>\n      )}\n    </SectionContainer>\n  );\n};\n\nexport default Characters;\n\nconst SectionContainer = styled.section`\n  padding: 0 16px;\n`;\n\nconst SectionHeader = styled.h2`\n  font-size: 2rem;\n  margin: 10px 0;\n`;\n\nconst ItemList = styled.ul`\n  list-style: none;\n  padding: 0;\n`;\n\nconst ListItem = styled.li`\n  padding: 5px;\n  margin: 10px 0;\n  border-radius: .25rem;\n`;\n\nconst ItemLink = styled.a`\n  text-decoration: none;\n  color: ${constants.secondary};\n`;\n\nconst DetailedItem = styled.p`\n  margin: 5px 0;\n`","import React from \"react\";\nimport axios from \"axios\";\n\nconst CommentSection = ({ comments, props }) => {\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const inputs = () => {\n      return {\n        name: e.target.name.value,\n        comment: e.target.comment.value\n      };\n    };\n\n    axios\n      .post(`http://localhost:8080/people/${props.id}/comments`, inputs())\n      .then(res => {\n        console.log(res.data);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n    e.target.reset();\n    alert(\"Comment Submitted\");\n    window.location.reload();\n  };\n\n  return (\n    <>\n      <h3>Comments</h3>\n      <form onSubmit={handleSubmit}>\n        <input name=\"name\" required placeholder=\"Enter Name...\"></input>\n        <input name=\"comment\" required placeholder=\"Enter Comment...\"></input>\n        <button type=\"submit\">Submit</button>\n      </form>\n      {comments ? (\n        comments.map((comment, index) => {\n          return (\n            <div key={index}>\n              <p>Time: {comment.timestamp}</p>\n              <p>Name: {comment.name}</p>\n              <p>Comment: {comment.comment}</p>\n            </div>\n          );\n        })\n      ) : (\n        <div>LOADING...</div>\n      )}\n    </>\n  );\n};\n\nexport default CommentSection;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport CommentSection from \"../CharacterComments\";\n\nconst Person = (props) => {\n  const [character, setCharacter] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    axios(`http://localhost:8080/people/${props.id}`).then(res => {\n      setCharacter(res.data);\n    });\n  }, [props.id]);\n\n  // console.log(props);\n  \n  return (\n    <>\n      {loading === true ? (\n        <div>\n          <h3>Name: {character.name}</h3>\n          <p>Height: {character.height}</p>\n          <p>Gender: {character.gender}</p>\n          <p>Mass: {character.mass}</p>\n          <p>Hair Colour: {character.hair_color}</p>\n          <p>Skin Colour: {character.skin_color}</p>\n          <p>Eye Colour: {character.eye_color}</p>\n          <p>Birth Year: {character.birth_year}</p>\n          <CommentSection props={props} comments={character.comments}/>\n        </div>\n      ) : <div>LOADING...</div>}\n    </>\n  );\n};\n\nexport default Person;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\nimport constants from \"../../Styles/Constants\";\n\n\nconst Starships = () => {\n  const [starships, setStarships] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    axios(\"http://localhost:8080/starships\").then(res => {\n      setStarships(res.data);\n    });\n  }, []);\n\n  return (\n    <SectionContainer>\n      <SectionHeader>Starships</SectionHeader>\n      {loading === true ? (\n        <ItemList>\n          {starships.map((ship, index) => {\n            return (\n              <ListItem key={index}>\n                <ItemLink href={`/starships/${ship.id}`}>\n                  {ship.name}\n                </ItemLink>\n              </ListItem>\n            );\n          })}\n        </ItemList>\n      ) : (\n        <p>LOADING...</p>\n      )}\n    </SectionContainer>\n  );\n};\n\nexport default Starships;\n\nconst SectionContainer = styled.section`\n  padding: 0 16px;\n`;\n\nconst SectionHeader = styled.h2`\n  font-size: 2rem;\n  margin: 10px 0;\n`;\n\nconst ItemList = styled.ul`\n  list-style: none;\n  padding: 0 16px;\n`;\n\nconst ListItem = styled.li`\n  padding: 5px;\n`;\n\nconst ItemLink = styled.a`\n  text-decoration: none;\n  color: ${constants.secondary};\n`;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst Ship = (props) => {\n  const [ship, setShip] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    axios(`http://localhost:8080/starships/${props.id}`).then(res => {\n      setShip(res.data);\n    });\n  }, [props.id]);\n\n  return (\n    <>\n      {loading === true ? (\n        <div>\n          <h3>Name: {ship.name}</h3>\n          <p>Model: {ship.model}</p>\n          <p>Manufacturer: {ship.manufacturer}</p>\n          <p>Length: {ship.length}</p>\n          <p>Max Atmosphering Speed: {ship.max_atmosphering_speed}</p>\n          <p>Crew: {ship.crew}</p>\n          <p>Passengers: {ship.passenger}</p>\n          <p>Cargo Capacity: {ship.cargo_capacity}</p>\n          <p>Hyperdrive Rating: {ship.hyperdrive_rating}</p>\n          <p>Starship Class: {ship.starship_class}</p>\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport default Ship;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\nimport constants from \"../../Styles/Constants\";\n\nconst Vehicles = () => {\n  const [vehicles, setVehicles] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    axios(\"http://localhost:8080/vehicles\").then(res => {\n      setVehicles(res.data);\n    });\n  }, []);\n\n  return (\n    <SectionContainer>\n      <SectionHeader>Vehicles</SectionHeader>\n      {loading === true ? (\n        <ItemList>\n          {vehicles.map((vehicle, index) => {\n            return (\n              <ListItem key={index}>\n                <ItemLink href={`/vehicles/${vehicle.id}`}>\n                  {vehicle.name}\n                </ItemLink>\n              </ListItem>\n            );\n          })}\n        </ItemList>\n      ) : (\n        <p>LOADING...</p>\n      )}\n    </SectionContainer>\n  );\n};\n\nexport default Vehicles;\n\nconst SectionContainer = styled.section`\n  padding: 0 16px;\n`;\n\nconst SectionHeader = styled.h2`\n  font-size: 2rem;\n  margin: 10px 0;\n`;\n\nconst ItemList = styled.ul`\n  list-style: none;\n  padding: 0 16px;\n`;\n\nconst ListItem = styled.li`\n  padding: 5px;\n`;\n\nconst ItemLink = styled.a`\n  text-decoration: none;\n  color: ${constants.secondary};\n`;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst Ship = (props) => {\n  const [vehicle, setVehicle] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    axios(`http://localhost:8080/vehicles/${props.id}`).then(res => {\n      setVehicle(res.data);\n    });\n  }, [props.id]);\n\n  return (\n    <>\n      {loading === true ? (\n        <div>\n          <h3>Name: {vehicle.name}</h3>\n          <p>Model: {vehicle.model}</p>\n          <p>Manufacturer: {vehicle.manufacturer}</p>\n          <p>Length: {vehicle.length}</p>\n          <p>Crew: {vehicle.crew}</p>\n          <p>Passengers: {vehicle.passenger}</p>\n          <p>Cargo Capacity: {vehicle.cargo_capacity}</p>\n          <p>Vehicle Class: {vehicle.vehicle_class}</p>\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport default Ship;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { A } from \"hookrouter\";\n\nconst Planets = () => {\n  const [planets, setPlanet] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    axios(\"http://localhost:8080/planets\").then(res => {\n      setPlanet(res.data);\n    });\n  }, []);\n\n  return (\n    <div>\n      <h2>Planets</h2>\n      <div>\n        {loading === true ? (\n          <div>\n            {planets.map((planet, index) => {\n              return (\n                <A href={`/planets/${planet.id}`} key={index}>\n                  <h4>Name: {planet.name}</h4>\n                </A>\n              );\n            })}\n          </div>\n        ) : (\n          <p>LOADING...</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Planets;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst Planet = (props) => {\n  const [planet, setPlanet] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    axios(`http://localhost:8080/planets/${props.id}`).then(res => {\n      setPlanet(res.data);\n    });\n  }, [props.id]);\n\n  return (\n    <>\n      {loading === true ? (\n        <div>\n          <h3>Name: {planet.name}</h3>\n          <p>Rotation Period: {planet.rotation_period}</p>\n          <p>Orbital Period: {planet.orbital_period}</p>\n          <p>Diameter: {planet.diameter}</p>\n          <p>Climate: {planet.climatet}</p>\n          <p>Gravity: {planet.gravity}</p>\n          <p>Terrain: {planet.terrain}</p>\n          <p>Surface Water: {planet.surface_water}</p>\n          <p>Population: {planet.population}</p>\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport default Planet;\n","import React from 'react'\n\nconst ErrorPage = () => {\n  return (\n    <div>\n      This is not the page you're looking for...\n    </div>\n  )\n}\n\n\nexport default ErrorPage;","import React from \"react\";\nimport Main from \"./Components/Main\";\nimport Characters from \"./Components/Characters\";\nimport Person from \"./Components/Person\";\nimport Starships from \"./Components/Starships\";\nimport Ship from \"./Components/Ship\";\nimport Vehicles from \"./Components/Vehicles\";\nimport Vehicle from \"./Components/Vehicle\";\nimport Planets from \"./Components/Planets\";\nimport Planet from \"./Components/Planet\";\nimport ErrorPage from \"./Components/Error\";\n\nconst routes = {\n  \"/\": () => <Main />,\n  \"/characters\": () => <Characters />,\n  \"/characters/:id\": ({id}) => <Person id={id}/>,\n  \"/starships\": () => <Starships />,\n  \"/starships/:id\": ({id}) => <Ship id={id} />,\n  \"/vehicles\": () => <Vehicles />,\n  \"/vehicles/:id\": ({id}) => <Vehicle id={id}/>,\n  \"/planets\": () => <Planets />,\n  \"/planets/:id\": ({id}) => <Planet id={id}/>,\n  \"\": () => <ErrorPage />\n};\n\nexport default routes;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useRoutes } from \"hookrouter\";\nimport routes from \"../router\";\nimport ErrorPage from \"../Components/Error\";\nimport constants from \"../Styles/Constants\";\n\nfunction App() {\n  const routeResult = useRoutes(routes);\n\n  return (\n    <PageContainer>\n      <NavContainer>\n        <NavLink href=\"/\">Main</NavLink>\n        <NavLink href=\"/characters\">People</NavLink>\n        <NavLink href=\"/starships\">Starships</NavLink>\n        <NavLink href=\"/vehicles\">Vehicles</NavLink>\n        <NavLink href=\"/planets\">Planets</NavLink>\n      </NavContainer>\n      {routeResult || <ErrorPage />}\n    </PageContainer>\n  );\n}\n\nexport default App;\n\nconst PageContainer = styled.div`\n  color: ${constants.secondary};\n  text-decoration: none;\n`;\n\nconst NavContainer = styled.div`\n  width: 300px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  margin: 0 auto;\n  height: 10vh;\n  align-items: center;\n`;\n\nconst NavLink = styled.a`\n  text-decoration: none;\n  color: ${constants.secondary};\n  font-size: ${constants.fontMobile};\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}